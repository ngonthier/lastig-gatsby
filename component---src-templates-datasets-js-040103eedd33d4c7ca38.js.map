{"version":3,"file":"component---src-templates-datasets-js-040103eedd33d4c7ca38.js","mappings":"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","sources":["webpack://lastig-gastby/./node_modules/react-chartjs-2/dist/index.js","webpack://lastig-gastby/./src/components/BarChart.js","webpack://lastig-gastby/./src/components/styles/Datasets.styled.js","webpack://lastig-gastby/./src/templates/datasets.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef();\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width\n    }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, Object.assign({}, props, {\n            ref: ref,\n            type: type\n        })));\n}\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\nimport { Bar } from \"react-chartjs-2\";\nexport const BarChart = ({ chartData }) => {\n    return (\n        <div className=\"chart-container\">\n            {/* <h2 style={{ textAlign: \"center\" }}>LASTIG Datasets</h2> */}\n            <Bar\n                data={chartData}\n                options={{\n                    plugins: {\n                        title: {\n                            display: true,\n                            text: \"Datasets\"\n                        },\n                        legend: {\n                            display: false,\n                        },\n                    },\n                    scales: {\n                        x: {\n                            display: true,\n                        },\n                        y: {\n                            display: true,\n                            type: 'logarithmic',\n                        }\n                    },\n                    legendCallback: function(chart) {\n                        var text = [];\n                        text.push('<ul class=\"' + chart.id + '-legend\">');\n                        for (var i = 0; i < chart.data.datasets.length; i++) {\n                          text.push('<li><div class=\"legendValue\"><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\">&nbsp;&nbsp;&nbsp;&nbsp;</span>');\n                          \n                          if (chart.data.datasets[i].label) {\n                            text.push('<span class=\"label\">' + chart.data.datasets[i].label + '</span>');\n                          }\n                  \n                          text.push('</div></li><div class=\"clear\"></div>');\n                        }\n                  \n                        text.push('</ul>');\n                  \n                        return text.join('');\n                      }\n                }}\n            />\n        </div>\n    );\n};\nexport default BarChart;","import styled from \"styled-components\";\n\nexport const DatasetLegend = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 1.5rem;\n    margin: 2rem;\n    text-decoration: none;\n    justify-content: space-between;\n`\nexport const DatasetLegendItem = styled.div`\n    width: 200px;\n    background-color: ${({theme, $dataTheme}) => theme.colors[$dataTheme]};\n    border-radius: 1rem;\n    padding: 1rem;\n`\n\nexport const DatasetList = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    text-decoration: none;\n`\n\nexport const Dataset = styled.div`\n    border-radius: 1rem;\n    border:2px solid black;\n    padding: 1rem;\n    margin: auto;\n    width: 80%;\n    text-decoration: inherit;\n`\n\nexport const DatasetHead = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    text-decoration: inherit;\n    div {\n        font-size: 1.25rem;\n        text-decoration: inherit;\n        a {text-decoration: inherit;}\n    }\n    div:last-child {\n        font-size: 1rem;\n        background-color: ${({theme, $dataTheme}) => theme.colors[$dataTheme]};\n        border-radius: 1rem;\n        padding: 1rem;\n        translate: 0 -40px;\n    }\n`\nexport const DatasetInfo = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    text-decoration: inherit;\n    div {\n        text-decoration: inherit;\n        a {text-decoration: inherit;}\n    }\n`\n\nexport const Downloads = styled.div`\n    font-size: 1rem;\n    background-color: black;\n    color: white;\n    border-radius: 1rem;\n    padding: 1rem;\n    font-family: avenir, sans-serif;\n    height: 23px;\n`","import * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Seo from '../components/seo'\nimport Chart from \"chart.js/auto\";\nimport BarChart from \"../components/BarChart\";\nimport { useState } from \"react\";\nimport { CategoryScale } from \"chart.js\";\nimport { theme } from '../theme'\nimport { DatasetLegend, DatasetLegendItem, DatasetList, Dataset, DatasetHead, DatasetInfo, Downloads } from '../components/styles/Datasets.styled'\nimport { useIntl } from 'react-intl'\nimport { Icon } from '@iconify-icon/react';\nimport { NavBar } from '../components/NavBar'\nimport { PublicationList } from '../components/CreateNodes';\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nChart.register(CategoryScale);\n\nexport default function DatasetsPage({ data, pageContext }) {\n    const team = pageContext.team\n    const isLastigPage = (team.length > 1)\n    console.log(`Dataset PAGE : ${team} => ${isLastigPage}`)\n    const intl = useIntl()\n    function trans(text) { return intl.formatMessage({ id: text }) }\n    const nodes = data.allDatasetCsv.nodes;\n    nodes.sort(function (a, b) {return b.downloads - a.downloads;});\n    const [chartData] = useState({\n        labels: data.allDatasetCsv.nodes.map((node) => `${node.short_name}`),\n        datasets: [\n            {\n                label: \"Datasets downloads\",\n                data: data.allDatasetCsv.nodes.map((node) => node.downloads),\n                backgroundColor: data.allDatasetCsv.nodes.map((node) => theme.colors[node.theme]),\n            }\n        ]\n    });\n    function Project({ project }) {\n        if (!project) { return <div></div>; }\n        return <div>Project: <b>{project}</b></div>;\n    }\n    function Doi({ doi }) {\n        if (!doi) { return <div></div>; }\n        return <div><a href={`https://www.doi.org/${doi}`} aria-label='doi'><Icon icon=\"academicons:doi\" width=\"2em\" height=\"2em\" /></a></div>;\n    }\n    function Teams({ teams }) {\n        if (!teams) { return <div></div>; }\n        return <div>Team(s): <b>{teams.join(\", \")}</b></div>;\n    }\n    function Publications({ doi }) {\n        if (!doi) { return <div></div>; }\n        const publications = data.allHalCsv.nodes.filter((n)=>n.researchData && n.researchData.some((rdata)=>rdata.includes(doi)))\n        return <div>\n            <PublicationList nodes = {publications} type={null} theme={theme}/>\n        </div>;\n    }\n\n    return (\n        <Layout pageTitle={`${isLastigPage ? 'LASTIG' : team} Datasets`}>\n            <h1>{trans(`${isLastigPage ? 'LASTIG' : team} Datasets`)}</h1>\n            {(!isLastigPage) && <NavBar title={team} menus = {data.site.siteMetadata.menus[team]} team={team}/>}\n            <div>\n                <DatasetLegend>\n                    {['Agriculture','DigitalHumanities','Tourism','Planning','Urban','LULC','Security','Climate'].map((dataTheme)=>\n                        <DatasetLegendItem $dataTheme = {dataTheme}><b>{dataTheme}</b></DatasetLegendItem>\n                    )}\n                </DatasetLegend>\n                <BarChart chartData={chartData} />\n            </div>\n            <DatasetList>\n                {\n                    data.allDatasetCsv.nodes.map((node) => (\n                        <Dataset key={node.id}>\n                            <DatasetHead $dataTheme={node.theme}>\n                                <div><a href={node.url}>{node.name}</a></div>\n                                <div>{node.theme}</div>\n                            </DatasetHead>\n                            <DatasetInfo>\n                                <GatsbyImage image={getImage(node.image)} alt={node.short_name} />\n                                <Doi doi={node.doi} />\n                                <Project project={node.project} />\n                                <Teams teams={node.teams} />\n                                <Downloads>{trans('Downloads:')} <b>{node.downloads }</b></Downloads>\n                            </DatasetInfo>\n                            <Publications doi={node.doi} />\n                        </Dataset>\n                    ))\n                }\n            </DatasetList>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    query ($team: [String]) {\n        allDatasetCsv(filter: { teams: { in: $team } }, sort: { downloads: DESC }) {\n            nodes {\n                downloads\n                doi\n                id\n                name\n                date\n                project\n                short_name\n                theme\n                url\n                teams\n                image {\n                    childImageSharp {\n                        gatsbyImageData(width: 200)\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                menuLinks {\n                    link\n                    name\n                    subMenu {\n                        link\n                        name\n                        subMenu {\n                            link\n                            name\n                        }\n                    }\n                }\n                menus {\n                    ACTE {\n                        link\n                        name\n                        subMenu {\n                        link\n                        name\n                        }\n                    }\n                    GEOVIS {\n                        link\n                        name\n                        subMenu {\n                        link\n                        name\n                        }\n                    }\n                    MEIG {\n                        link\n                        name\n                        subMenu {\n                        link\n                        name\n                        }\n                    }\n                    STRUDEL {\n                        link\n                        name\n                        subMenu {\n                        link\n                        name\n                        }\n                    }\n                }\n            }\n        }\n        allHalCsv {\n            nodes {\n                halId\n                id\n                citationRef\n                docType\n                fileMain\n                files\n                invitedCommunication\n                label_bibtex\n                popularLevel\n                proceedings\n                producedDate\n                title\n                authIdHalFullName {\n                    fullName\n                    idHal\n                }\n                peerReviewing\n                researchData\n                audience\n                doiId\n                softCodeRepository\n                arxivId\n                anrProjectTitle\n                europeanProjectTitle\n                publicationDate\n                teams\n                authors\n                keywords\n            }\n        }\n    }\n`\n\nexport const Head = ({pageContext}) => <Seo title={`${pageContext.team.length > 1 ? 'LASTIG' : pageContext.team} Datasets`} />\n"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","type","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","config","setTimeout","update","role","Chart","forwardRef","createTypedChart","registerables","register","Bar","_ref","chartData","React","className","title","display","text","legend","scales","x","y","legendCallback","id","i","backgroundColor","label","join","DatasetLegend","styled","div","withConfig","displayName","componentId","DatasetLegendItem","theme","$dataTheme","colors","DatasetList","Dataset","DatasetHead","_ref2","DatasetInfo","Downloads","DatasetsPage","pageContext","team","isLastigPage","console","log","intl","useIntl","trans","formatMessage","allDatasetCsv","nodes","sort","a","b","downloads","useState","node","short_name","Project","project","Doi","_ref3","doi","href","Icon","icon","Teams","_ref4","teams","Publications","_ref5","publications","allHalCsv","filter","n","researchData","some","rdata","PublicationList","Layout","pageTitle","NavBar","menus","site","siteMetadata","dataTheme","BarChart","key","url","name","GatsbyImage","image","getImage","alt","CategoryScale","Head","_ref6","Seo"],"sourceRoot":""}