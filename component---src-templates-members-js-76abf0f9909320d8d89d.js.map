{"version":3,"file":"component---src-templates-members-js-76abf0f9909320d8d89d.js","mappings":"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","sources":["webpack://lastig-gastby/./src/components/seo.js","webpack://lastig-gastby/./src/components/styles/Members.styled.js","webpack://lastig-gastby/./src/templates/members.js","webpack://lastig-gastby/./node_modules/react-intl/lib/src/components/message.js"],"sourcesContent":["import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>{title} | {data.site.siteMetadata.title}</title>\n  )\n}\n\nexport default Seo","import styled from \"styled-components\";\n\nexport const Members = styled.div`\n    display: grid;\n    gap: 10px;\n    grid-template-columns: repeat(auto-fill,minmax(160px,1fr));\n`\n\nexport const StyledMember = styled.div`\n    img {\n        // width: 100%;\n        border-radius: 50% !important;\n        height: 100px;\n        width: 100px;\n    }\n`\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { LocalizedLink as Link } from \"@ericcote/gatsby-theme-i18n\"\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Members, StyledMember } from '../components/styles/Members.styled'\nimport Layout from '../components/Layout'\nimport Seo from '../components/seo'\nimport { NavBar } from '../components/NavBar'\n\nconst modifyUrl = (url) => {\n    if (!url) return \"https://www.umr-lastig.fr/lastig_data/img/abstract-user-icon.svg\";\n    if (url.startsWith(\"/\")) return \"https://www.umr-lastig.fr\" + url;\n    return url;\n}\n\nconst Member = ({ node }) => {\n    return (\n        <StyledMember key={node.id}>\n            <Link to={`/members/${node.firstname}-${node.lastname}`}>\n                <img src={modifyUrl(node.photo)} alt={`${node.firstname} ${node.lastname}`} />\n                <h3> {node.firstname} {node.alt_firstname && `(${node.alt_firstname}) `}{node.lastname} </h3>\n                <p> {node.status} </p>\n                {/* <p>Started: {node.start_date}</p> */}\n            </Link>\n        </StyledMember>\n    )\n}\n\nexport default function MembersPage({ data, pageContext }) {\n    const isLastigPage = (pageContext.team.length > 1)\n    const team = isLastigPage ? 'LASTIG' : pageContext.team\n    console.log(`Members PAGE : ${team} => ${isLastigPage}`)\n    const intl = useIntl()\n    function trans(text) { return intl.formatMessage({ id: text }) }\n    const phD = data.allPeopleCsv.nodes.filter((node) => node.status === 'PhD student' && node.member === 'true')\n    const postDoc = data.allPeopleCsv.nodes.filter((node) => node.status === 'Post-doc' && node.member === 'true' && node.perm === 'false')\n    const engineer = data.allPeopleCsv.nodes.filter((node) => node.status.toLowerCase().includes('engineer') && node.member === 'true' && node.perm === 'false')\n    const alumni = data.allPeopleCsv.nodes.filter((node) => node.member === 'false')\n    const permanent = data.allPeopleCsv.nodes.filter((node) => node.perm === 'true' && node.status !== 'PhD student' && node.member === 'true')\n    return (\n        //`${isLastigPage ? 'LASTIG' : team} Members`\n        <Layout pageTitle={<FormattedMessage id=\"members\" values={{ team: team }}/>}>\n            <h1>{<FormattedMessage id=\"members\" values={{ team: team }}/>}</h1>\n            {(!isLastigPage) && <NavBar title={team} menus={data.site.siteMetadata.menus[team]} team={team} />}\n            <h2>{trans(\"Permanent staff\")}</h2>\n            <Members>\n                {\n                    permanent.map((node) => Member(node = { node }))\n                }\n            </Members>\n            {phD.length > 0 && <>\n                <h2>{trans(\"PhD candidates\")}</h2>\n                <Members>\n                    {\n                        phD.map((node) => Member(node = { node }))\n                    }\n                </Members></>\n            }\n            {postDoc.length > 0 && <>\n                <h2>{trans(\"Post-docs\")}</h2>\n                <Members>\n                    {\n                        postDoc.map((node) => Member(node = { node }))\n                    }\n                </Members></>\n            }\n            {engineer.length > 0 && <>\n                <h2>{trans(\"Engineers\")}</h2>\n                <Members>\n                    {\n                        engineer.map((node) => Member(node = { node }))\n                    }\n                </Members>\n            </>\n            }\n            <h2>{trans(\"Alumni\")}</h2>\n            <Members>\n                {\n                    alumni.map((node) => Member(node = { node }))\n                }\n            </Members>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\nquery MembersQuery ($team: [String]!) {\n    allPeopleCsv(filter: { teams: { in: $team } })  {\n        nodes {\n            HAL\n            end_date\n            firstname\n            alt_firstname\n            id\n            lastname\n            member\n            perm\n            photo\n            start_date\n            status\n            statut\n            teams\n            webpage\n        }\n    }\n    site {\n        siteMetadata {\n            menus {\n                ACTE {\n                    link\n                    name\n                    subMenu {\n                        link\n                        name\n                    }\n                }\n                GEOVIS {\n                    link\n                    name\n                    subMenu {\n                        link\n                        name\n                    }\n                }\n                MEIG {\n                    link\n                    name\n                    subMenu {\n                        link\n                        name\n                    }\n                }\n                STRUDEL {\n                    link\n                    name\n                    subMenu {\n                        link\n                        name\n                    }\n                }\n            }\n        }\n    }\n}\n`\n\nexport const Head = ({ pageContext }) => <Seo title={`${pageContext.team.length > 1 ? 'LASTIG' : pageContext.team} Members`} />\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n"],"names":["_ref","title","data","useStaticQuery","React","site","siteMetadata","Members","styled","div","withConfig","displayName","componentId","StyledMember","Member","node","key","id","Link","to","firstname","lastname","src","url","photo","startsWith","alt","alt_firstname","status","MembersPage","_ref2","pageContext","isLastigPage","team","length","console","log","intl","useIntl","trans","text","formatMessage","phD","allPeopleCsv","nodes","filter","member","postDoc","perm","engineer","toLowerCase","includes","alumni","permanent","Layout","pageTitle","FormattedMessage","values","NavBar","menus","map","Head","_ref3","Seo","props","_a","textComponent","Text","description","defaultMessage","children","_b","tagName","Component","ignoreTag","Array","isArray","toArray","MemoizedFormattedMessage","prevProps","nextProps","otherProps","nextValues","nextOtherProps"],"sourceRoot":""}